Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

B. A SLL is most efficient b/c:
  * adding & deleting from the beginning and end is simpler because we just change the HEAD and TAIL nodes
  as necessary

  * b/c we aren't worried about indexing into the list or searching, we don't need a regular Python list
    - the regular Python list would be more efficient @ searching b/c it can just be straight up searched
      while a SLL would force the program to go through each node until it found the searched term






2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

B.  A dict is best here mostly because of the look-up requirement.  The function can just search by key or value
  and not worry about where it is (unordered ftw!).

  Adding/deleting are simpler in a dict too because the items can just be added with new k:v pairs
  or removed without having to reference any other items.






3. Explain why looking up, adding elements, and removing elements from a
   dictionary or hash map are all O(1) operations.
  Because they aren't ordered so the function knows exactly where to go to find the element
  and then return/remove it; and adding an element just plops it on the end of the dict.





4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.
  Because everything before and/or after the insertion or deletion needs to move (change indices).






5. What is the correct runtime for:

  - Bubble Sort? O(n^2)

  - Quicksort? O(n^2)

  - Merge Sort? O(n log n)

  - Insertion Sort? O(n^2)


6. What is the difference between a tree and a graph?
  Graphs are loopy--they have cycles.  Trees just have their branches and nodes.




7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst - [8, 4, 1, 6, 5, 2, 7, 3]

    - pivot - 5

    - lo - [4,1,2,3]

    - hi - [8,6,7]



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst - [4,1,2,3]

  - pivot - 2

  - lo - [1]

  - hi - [4,2]
